// Copyright 2015 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

include "compact_spline.fbs";

namespace motive;

// Same as MatrixOperationType in motive/matrix_op.h.
// Quaternion and RotateAbout ops cannot be present in the same animation.
// If quaternion ops are present, there should only be at most one op of each
// type and the list of operations should be processor by the SqtMotiveProcessor
// instead of the MatrixMotiveProcessor. Quaternion operations are included here
// (rather than creating a separate type) so that RigAnims can easily be
// represented by either Matrices or Sqts without much code change.
enum MatrixOperationTypeFb : byte {
  kInvalidMatrixOperation,
  // RotateAbout ops only function in the MatrixMotiveProcessor.
  kRotateAboutX,
  kRotateAboutY,
  kRotateAboutZ,
  kTranslateX,
  kTranslateY,
  kTranslateZ,
  kScaleX,
  kScaleY,
  kScaleZ,
  kScaleUniformly,
  // Quaternion ops only function in the SqtMotiveProcessor.
  kQuaternionW,
  kQuaternionX,
  kQuaternionY,
  kQuaternionZ
}

table ConstantOpFb {
  y_const:float;
}

union MatrixOpValueFb {
  CompactSplineFb,
  ConstantOpFb,
  CompactSplineFloatFb,
}

// One operation performed on the matrix.
// The input value to the operation can be constant, or driven by a spline.
table MatrixOpFb {
  id:byte;
  type:MatrixOperationTypeFb;
  value:MatrixOpValueFb;
}

// Animate a single matrix. Combine several of these in a rig for skeletal
// animation.
table MatrixAnimFb {
  ops:[MatrixOpFb];
  // True if this animation should be backed by an Sqt-based implementation
  // instead of a Matrix-based implementation.
  sqt_anim:bool = false;
}

// Animate an array of matrices.
table RigAnimFb {
  // Each bone in the rig is animated by its own matrix.
  // Matrix values are in local space (i.e. the origin is the bone position +
  // orientation). To convert to character space, traverse the hierarchy in
  // `bone_parents`.
  matrix_anims:[MatrixAnimFb];

  // Specifies bone hierarchy. Bone `i` is a child of `bone_parents[i]`.
  // If a root bone (i.e. no parent), set to 255.
  bone_parents:[ubyte];

  // For debugging. The human-readable name of each bone animated by
  // `matrix_anims`.
  bone_names:[string];

  // True if all the data streams end where they started.
  repeat:bool;

  // Optional name for the overall animation. Used in AnimTable::QueryByName().
  name:string;
}

root_type RigAnimFb;
file_identifier "ANIM";
file_extension "motiveanim";
